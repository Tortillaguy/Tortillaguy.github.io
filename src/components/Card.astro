---
import type { Project } from "../types";
import Tag from "./Tag.astro";
import external from "../icons/external.svg?raw";

const { project } = Astro.props as { project: Project };
const { filename, name, role, tags, link, imageStyle, postID } =
  project as Project;
---

<style>
  .card {
    max-height: 420px;
    width: 300px;
    background: transparent;
  }
</style>

<project-card data-project={JSON.stringify(project)}>
  <div
    class="display:block card group hover:hover-shadow transition-transform hover:-translate-y-3 duration-300 ease-in-out min-w-[16rem] bg-base-100 shadow-md not-prose flex-grow cursor-pointer overflow-hidden"
  >
    <figure class="rounded-t-[12px]">
      <img
        style={{
          aspectRatio: "4/3",
          objectPosition: "50% 20%",
          objectFit: "cover",
          width: "100%",
          ...imageStyle,
        }}
        src={`/assets/${filename}`}
        alt={filename}
      />
    </figure>
    <div
      class="p-4 pb-2 flex flex-col gap-2 bg-opacity-20 bg-[#c0e9ff] filter:blur-md"
    >
      <h2 class="card-title inline-block text-[#f5f5f5] font-bold">
        {name}
      </h2>

      {role && <span class="text-[#5dfeff]">{role}</span>}
      <div class="card-actions">
        <div class="flex flex-wrap gap-[10px] prose gap-y-0">
          {tags?.map((tag: string) => <Tag title={tag} />)}
        </div>
      </div>
      <div class="flex-grow"></div>
      <button
        class="p-2 rounded-lg bg-[#262626e7] text-white hover:text-pink-300 gap-4 flex justify-center items-center [&>*]:hover:stroke-pink-300"
        >{postID ? "Read" : "See"} More</button
      >
    </div>
  </div>
</project-card>

<script>
  import { modalData } from "../lib/modalStore";
  import type { Project } from "../types";
  const cards = document.querySelectorAll("a.card");
  let time = 0;
  let dragheld = 0;
  cards.forEach((card) => {
    card.addEventListener("mousedown", () => {
      time = Date.now();
    });
    card.addEventListener("mouseup", (e) => {
      dragheld = Date.now() - time;
    });
    card.addEventListener("click", (e) => {
      console.log({ dragheld });
      if (dragheld > 100) {
        e.stopPropagation();
        e.preventDefault();
        return false;
      }
    });
  });

  class ProjectCard extends HTMLElement {
    constructor() {
      super();

      const readMore = this.querySelector("button");
      const project: Project = JSON.parse(this.dataset["project"]!);

      if (readMore) {
        readMore.addEventListener("click", () => {
          // @ts-ignore
          window.gtag("event", "project-click", {
            event_category: "Project",
            event_label: "Card Click",
            value: project.name,
          });
          if (project.postID) {
            modalData.set(project);
          } else {
            window.open(project.link, "_blank");
          }
        });
      }
    }
  }

  // Tell the browser to use our AstroHeart class for <astro-heart> elements.
  customElements.define("project-card", ProjectCard);
</script>
