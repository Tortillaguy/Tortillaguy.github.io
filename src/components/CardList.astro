---
import type { Project } from "../types";
import Card from "./Card.astro";

const { projects, key } = Astro.props as { projects: Project[]; key: string };
---

<div
  class="flex justify-evenly gap-4 items-center px-4 max-w-screen-xl mx-auto"
>
  <img
    src="prev.svg"
    id={key + "-back"}
    class="fill-white w-5 h-5 scale-150 hover:scale-[2.5] transition-transform cursor-pointer hidden md:block"
  />
  <div id={key + "-list"} class="card-list">
    {projects.map((project) => <Card project={project} />)}
  </div>
  <img
    id={key + "-next"}
    src="next.svg"
    class="fill-white w-5 h-5 scale-150 hover:scale-[2.5] transition-transform cursor-pointer hidden md:block"
  />
</div>

<script>
  ["productions", "art", "projects"].forEach((key) => {
    const list = document.getElementById(key + "-list")!;
    const next = document.getElementById(key + "-next");
    const back = document.getElementById(key + "-back");

    const getScrollAmount = () => {
      // Get the actual first card element
      const firstCard = list.children[0] as HTMLElement;
      if (!firstCard) return list.clientWidth;

      // Get the computed styles to find the actual gap
      const listStyles = window.getComputedStyle(list);
      const gap = parseFloat(listStyles.gap) || 20;

      // Get the actual card width from the DOM
      const cardWidth = firstCard.offsetWidth;
      const cardWithGap = cardWidth + gap;

      // Calculate how many cards fit in the visible area
      const visibleWidth = list.clientWidth;
      const cardsPerPage = Math.floor(visibleWidth / cardWithGap);

      // Scroll by the width of cards that fit in one page
      // Ensure at least 1 card scrolls if calculation results in 0
      return Math.max(cardsPerPage, 1) * cardWithGap;
    };

    const onNext = () => {
      const scrollAmount = getScrollAmount();
      const maxScroll = list.scrollWidth - list.clientWidth;
      const newPosition = Math.min(list.scrollLeft + scrollAmount, maxScroll);

      list.scrollTo({ left: newPosition, behavior: "smooth" });
    };

    const onBack = () => {
      const scrollAmount = getScrollAmount();
      const newPosition = Math.max(list.scrollLeft - scrollAmount, 0);

      list.scrollTo({ left: newPosition, behavior: "smooth" });
    };

    next?.addEventListener("click", onNext);
    back?.addEventListener("click", onBack);
  });
</script>
